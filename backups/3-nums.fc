{-
  TASK 3 - Find and replace binary substring
  Binary string is represented as a cell linked list: string splitted to chunks,
  first chunk stored to the root cell, next one to the cell in ref and so on;
  each cell can have only one ref.
  Write the method that find and replaces one flags in the binary string
  with another value. Flags and values can be can be of any length, but
  strictly up to 128 bits. The method must replace every flag it finds.
  Flag and the value to be replaced is guaranteed to be greater than 0.
  Lets give a simple example. We have the target flag 101110101 and the value
  to be written 111111111 as inputs, and a linked list of cells, in which the bit
  value of the first cell ends with ...10100001011, and in the ref we have cell that
  starts with 10101000111111...
  The output should be a linked list where the first
  cell ends with ...10100001111, and the second cell starts with 11111000111111...

-}

(int) ubitsize(int n) asm "UBITSIZE";
(int) sign(int n) asm "SGN";

() recv_internal() {
}

(tuple, builder) write_num(tuple, int, builder, int) asm """
DUP2            // t i b n b n
BCHKBITSQ       // t i b n <res>
IF:<{           // t i b n
    STUX        // t b'
}>ELSE<{        // t i b n
    OVER        // t i b n b
    BREMBITS    // t i b n rem

    DUP2        // t i b n rem n rem
    SUB         // t i b n rem delta

    s4 PUSH     // t i b n rem delta i
    OVER
    RSHIFT      // t i b n rem delta x
    ROT         // t i b n delta x rem

    s4 PUSH     // t i b n delta x rem b
    ROTREV      // t i b n delta b x rem
    STUXR       // t i b n delta b'

    s5 PUSH     // t i b n delta b' t
    CONS
    s5 XCHG0
    DROP        // t' i b n delta

    ROTREV      // t' i delta b n
    DROP2       // t' i delta

    DUP
    POW2
    DEC         // t' i delta floor

    ROT
    AND         // t' delta floor&i
    NEWC        // t' delta floor&i b

    ROT         // t' floor&i b delta
    STUX        // t' b'
}>
""";

;; (tuple, builder) insert_number(tuple lst, builder b, int num, int n) inline {
;;     if (checkbits(b, n)) {
;;         b = b.store_uint(num, n);
;;     } else {
;;         int rem = rembits(b);
;;         int delta = n - rem;
;;         int x = num >> delta;
;;         b = b.store_uint(x, rem);
;;         lst = cons(b, lst);
;;
;;         int floor = (1 << delta) - 1;
;;         b = begin_cell().store_uint(num & floor, delta);
;;     }
;;
;;     return (lst, b);
;; }

;; testable
(cell) find_and_replace(int flag, int value, cell linked_list) method_id {
    (int flen, int vlen) = (ubitsize(flag), ubitsize(value));

    int leftmost = (1 << flen);
    int floor = leftmost - 1;
    leftmost >>= 1;

    builder b = begin_cell();
    tuple lst = null();

    int offset = 0;
    int prev_word_len = 0;
    int prev_word = 0;

    ;; 409849

    while (~ null?(linked_list)) {
        slice s = linked_list.begin_parse();
        int sz = slice_bits(s);

        while (sz > 0) {
            int word_len = min(sz, 256 - prev_word_len);
            sz -= word_len;

            int word = s~load_uint(word_len);
            if (prev_word_len > 0) {
                word = (prev_word << word_len) | word;
                word_len += prev_word_len;
            }

            ;; TODO: check SDPFX instead?

            int shift = word_len - flen;
            int exec = 0;

            do {
                try {
                    while (shift >= 0) {
                        int curr = (word >> shift) & floor;
                        if (curr == flag) {
                            b~store_uint(value, vlen);
                            shift -= flen;
                        } else {
                            int bit = sign(curr & leftmost);
                            b~store_uint(bit, 1);
                            shift -= 1;
                        }
                    }
                    exec = -1;
                } catch(x, n) {
                    lst = cons(b, lst);
                    b = begin_cell();
                }
            } until(exec);

            prev_word_len = min(word_len, flen + shift);
            prev_word = word & ((1 << prev_word_len) - 1);
        }

        if (~ slice_refs_empty?(s)) {
            linked_list = s.preload_ref();
        } else {
            linked_list = null();
        }
    }

    if (prev_word_len > 0) {
        (lst, b) = write_num(lst, prev_word, b, prev_word_len);
    }

    while (~ null?(lst)) {
        builder curr = lst~list_next();
        b = curr.store_ref(b.end_cell());
    }

    return b.end_cell();
}
