{-
  TASK 4 - Caesar Cipher
  Implement a Caesar cipher encryption and decryption functions.
  The input is a string (https://docs.ton.org/develop/smart-contracts/guidelines/internal-messages#simple-message-with-comment)
  where the text is encrypted in a cell (after 32bit 00000000 prefix flag), the algorithm rotates the characters and the last ASCII
  character should go to the beginning. Return new text encoded in cell.
-}

() recv_internal() {
}

(cell) make_shift(int shift, cell c) asm """
SWAP

0 PUSHINT
1 PUSHINT
2 PUSHINT
3 PUSHINT
4 PUSHINT
5 PUSHINT
6 PUSHINT
7 PUSHINT
8 PUSHINT
9 PUSHINT
10 PUSHINT
11 PUSHINT
12 PUSHINT
13 PUSHINT
14 PUSHINT
15 PUSHINT
16 PUSHINT
17 PUSHINT
18 PUSHINT
19 PUSHINT
20 PUSHINT
21 PUSHINT
22 PUSHINT
23 PUSHINT
24 PUSHINT
25 PUSHINT
26 PUSHINT
27 PUSHINT
28 PUSHINT
29 PUSHINT
30 PUSHINT
31 PUSHINT
32 PUSHINT
33 PUSHINT
34 PUSHINT
35 PUSHINT
36 PUSHINT
37 PUSHINT
38 PUSHINT
39 PUSHINT
40 PUSHINT
41 PUSHINT
42 PUSHINT
43 PUSHINT
44 PUSHINT
45 PUSHINT
46 PUSHINT
47 PUSHINT
48 PUSHINT
49 PUSHINT
50 PUSHINT
51 PUSHINT
52 PUSHINT
53 PUSHINT
54 PUSHINT
55 PUSHINT
56 PUSHINT
57 PUSHINT
58 PUSHINT
59 PUSHINT
60 PUSHINT
61 PUSHINT
62 PUSHINT
63 PUSHINT
64 PUSHINT

// uc
65 s() PUSH     // shift
26 PUSHINT
REPEAT:<{
    DUP
    26 PUSHINT
    MOD

    65 ADDCONST
    SWAP
    INC
}>
DROP

91 PUSHINT
92 PUSHINT
93 PUSHINT
94 PUSHINT
95 PUSHINT
96 PUSHINT

// lc
97 s() PUSH     // shift
26 PUSHINT
REPEAT:<{
    DUP
    26 PUSHINT
    MOD

    97 ADDCONST
    SWAP
    INC
}>
DROP

123 PUSHINT
124 PUSHINT
125 PUSHINT
126 PUSHINT
127 PUSHINT
128 PUSHINT
129 PUSHINT
130 PUSHINT
131 PUSHINT
132 PUSHINT
133 PUSHINT
134 PUSHINT
135 PUSHINT
136 PUSHINT
137 PUSHINT
138 PUSHINT
139 PUSHINT
140 PUSHINT
141 PUSHINT
142 PUSHINT
143 PUSHINT
144 PUSHINT
145 PUSHINT
146 PUSHINT
147 PUSHINT
148 PUSHINT
149 PUSHINT
150 PUSHINT
151 PUSHINT
152 PUSHINT
153 PUSHINT
154 PUSHINT
155 PUSHINT
156 PUSHINT
157 PUSHINT
158 PUSHINT
159 PUSHINT
160 PUSHINT
161 PUSHINT
162 PUSHINT
163 PUSHINT
164 PUSHINT
165 PUSHINT
166 PUSHINT
167 PUSHINT
168 PUSHINT
169 PUSHINT
170 PUSHINT
171 PUSHINT
172 PUSHINT
173 PUSHINT
174 PUSHINT
175 PUSHINT
176 PUSHINT
177 PUSHINT
178 PUSHINT
179 PUSHINT
180 PUSHINT
181 PUSHINT
182 PUSHINT
183 PUSHINT
184 PUSHINT
185 PUSHINT
186 PUSHINT
187 PUSHINT
188 PUSHINT
189 PUSHINT
190 PUSHINT
191 PUSHINT
192 PUSHINT
193 PUSHINT
194 PUSHINT
195 PUSHINT
196 PUSHINT
197 PUSHINT
198 PUSHINT
199 PUSHINT
200 PUSHINT
201 PUSHINT
202 PUSHINT
203 PUSHINT
204 PUSHINT
205 PUSHINT
206 PUSHINT
207 PUSHINT
208 PUSHINT
209 PUSHINT
210 PUSHINT  // emperical

TUPLEVAR
NIP

SWAP
CTOS
32 LDU          // alpha op sls

NEWC            // alpha op sls b
ROT             // alpha sls b op
32 STUR         // alpha sls b

AGAINBRK:<{
    OVER        // alpha sls b sls
    SBITS       // alpha sls b bits
    3 RSHIFT#   // alpha sls b bits/8

    REPEAT:<{
        SWAP        // alpha b sls
        8 LDU       // alpha b x sls

        // alpha b x sls
        // alpha x b sls alpha
        // alpha x b alpha sls
        // alpha sls b alpha x
        s2 s3 s2 XCPUXC

        INDEXVAR    // alpha sls b x'
        8 STUR      // alpha sls b'
    }>

    s1 s0 XCPU      // alpha b' sls sls
    SREFS           // alpha b' sls refs

    IF:<{
        LDREFRTOS   // alpha b' sls sls'
        s1 POP      // alpha b' sls'
        s1 s2 XCHG  // b' alpha sls'
        NEWC        // b' alpha sls' b
    }>ELSE<{
        ROT         // b' sls alpha
        DROP2

        DEPTH
        DEC
        REPEAT:<{
            STBREFR
        }>
        RETALT
    }>
}>

""";

;; 80055
;; 80099

;; testable
(cell) caesar_cipher_encrypt(int shift, cell text) method_id {
    return make_shift(shift, text);
}

;; testable
(cell) caesar_cipher_decrypt(int shift, cell text) method_id {
    return make_shift(26 - shift, text);
}
